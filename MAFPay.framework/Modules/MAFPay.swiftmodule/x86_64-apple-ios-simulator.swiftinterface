// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MAFPay
import AVFoundation
import Alamofire
import Foundation
@_exported import MAFPay
import Swift
import UIKit
public struct Token : Swift.Codable {
  public let cardToken: Swift.String
  public let accountHolderId: Swift.String?
  public let card: MAFPay.Token.Card?
  public struct Card : Swift.Codable {
    public let cardBrand: Swift.String?
    public let cardType: Swift.String?
    public let cardBin: Swift.String?
    public let maskedCardNumber: Swift.String?
    public let expiryMonth: Swift.String?
    public let expiryYear: Swift.String?
    public let status: Swift.String?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AccountHolder : Swift.Decodable {
  public let accountHolderId: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
@objc open class CardView : UIKit.UIView {
  weak public var delegate: MAFPay.PMCardDelegate?
  public var itemType: MAFPay.ItemType? {
    get
  }
  public var textFieldFontStyle: UIKit.UIFont? {
    get
    set
  }
  public var placeholderText: Swift.String? {
    get
    set
  }
  public var placeholderAttributedString: Foundation.NSAttributedString? {
    get
    set
  }
  public var textFieldBorderStyle: UIKit.UITextField.BorderStyle? {
    get
    set
  }
  public var textFieldBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  public var textFieldFontColor: UIKit.UIColor? {
    get
    set
  }
  public var textFieldTintColor: UIKit.UIColor? {
    get
    set
  }
  public var textFieldIsSecureTextEntry: Swift.Bool {
    get
    set
  }
  public var textFieldReturnKeyType: UIKit.UIReturnKeyType? {
    get
    set
  }
  public var textFieldTextAlignment: UIKit.NSTextAlignment? {
    get
    set
  }
  public var separatorCharacter: Swift.String? {
    get
    set
  }
  public var cardBrandImages: MAFPay.CardBrandImages? {
    get
    set
  }
  public var errorText: Swift.String? {
    get
    set
  }
  public var disableErrorMessage: Swift.Bool {
    get
    set
  }
  public var showErrorMessageType: MAFPay.ShowErrorMessage {
    get
    set
  }
  public var textFieldErrorTextColor: UIKit.UIColor? {
    get
    set
  }
  public var textFieldImage: UIKit.UIImage? {
    get
    set
  }
  open func setupView(as itemType: MAFPay.ItemType, iconTextFieldPosition: MAFPay.IconTextFieldPosition? = nil)
  open func setCornerRadius(_ radius: CoreGraphics.CGFloat, borderWidth: CoreGraphics.CGFloat? = nil, borderColor: UIKit.UIColor? = nil)
  open func setHeaderTitle(_ text: Swift.String, fontStyle: UIKit.UIFont? = nil, fontColor: UIKit.UIColor? = nil, textAlignment: UIKit.NSTextAlignment? = nil)
  open func setUnderline(defaltColor: UIKit.UIColor? = nil, selectedColor: UIKit.UIColor? = nil)
  open func setFooterError(_ text: Swift.String? = nil, fontStyle: UIKit.UIFont? = nil, fontColor: UIKit.UIColor? = nil, textAlignment: UIKit.NSTextAlignment? = nil)
  open func setExpiryDatePicker(_ titleText: Swift.String? = nil, doneText: Swift.String? = nil, cancelText: Swift.String? = nil)
  open func textFieldBecomeFirstResponder()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Card : Swift.Decodable {
  public init(cardNumber: Swift.String, cvc: Swift.String, expiryMonth: Swift.Int, expiryYear: Swift.Int, holderName: Swift.String? = nil)
  public var validateCard: MAFPay.CardError? {
    get
  }
  public var validateCVC: MAFPay.CardError? {
    get
  }
  public var validateExpiryDate: MAFPay.CardError? {
    get
  }
  public var cardBrand: MAFPay.CardBrand {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public typealias MAFPayResponse<T> = (Swift.Result<T, MAFPay.MAFPayError>) -> Swift.Void
@objc public enum Enviroment : Swift.Int {
  case production
  case staging
  case sandbox
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum MAFPayError : Swift.Error {
  case timeOut(Swift.Error?)
  case noInternet(Swift.Error?)
  case serverError(Swift.Error?)
  case internalError(Swift.Error?)
  public var errorDescription: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
}
public enum CardError : Swift.Error {
  case invalidCardNumberLength
  case invalidCardNumber
  case invalidCVCLength
  case invalidCVCFormat
  case invalidExpiryMonth
  case invalidExpiryYear
  case invalidExpiryDate
  case invalidCardHolderName
  case unsupportedCard
  public var errorDescription: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public static func == (a: MAFPay.CardError, b: MAFPay.CardError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum ItemType : Swift.String {
  case cardNumber
  case holderName
  case cvcNumber
  case expiryDate
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct CardBrandImages {
  public var visa: UIKit.UIImage?
  public var mastercard: UIKit.UIImage?
  public init(visa: UIKit.UIImage? = nil, mastercard: UIKit.UIImage? = nil)
}
public enum IconTextFieldPosition : Swift.Int {
  case left
  case right
  case unspecified
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum ShowErrorMessage {
  case whileTyping
  case endTyping
  public static func == (a: MAFPay.ShowErrorMessage, b: MAFPay.ShowErrorMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol PMTokanizeButtonDelegate : AnyObject {
  func tokenizeButtonClicked()
  func tokenizeResponseReceived(_ result: Swift.Result<MAFPay.Token, MAFPay.MAFPayError>)
}
@objc public class TokanizeButton : UIKit.UIButton {
  weak public var delegate: MAFPay.PMTokanizeButtonDelegate?
  public var accountHolderID: Swift.String?
  public var tokanizeWithVerify: Swift.Bool
  @objc deinit
}
public typealias JSONDictionary = [Swift.String : Any]
public protocol PMCardDelegate : AnyObject {
  func allItemsValidation(_ cardError: MAFPay.CardError?)
  func cardNumberValidation(_ cardError: MAFPay.CardError?)
  func cardExpiryDateValidation(_ cardError: MAFPay.CardError?)
  func cardCVCNumberValidation(_ cardError: MAFPay.CardError?)
  func cardHolderNameValidation(_ cardError: MAFPay.CardError?)
  func cardNumberBrand(_ cardBrand: MAFPay.CardBrand?)
  func textFieldDidReturnButtonTapped(_ itemType: MAFPay.ItemType)
}
extension PMCardDelegate {
  public func cardNumberValidation(_ cardError: MAFPay.CardError?)
  public func cardExpiryDateValidation(_ cardError: MAFPay.CardError?)
  public func cardCVCNumberValidation(_ cardError: MAFPay.CardError?)
  public func cardHolderNameValidation(_ cardError: MAFPay.CardError?)
  public func cardNumberBrand(_ cardBrand: MAFPay.CardBrand?)
  public func textFieldDidReturnButtonTapped(_ itemType: MAFPay.ItemType)
}
@objc public class MAFPay : ObjectiveC.NSObject {
  public static var authorizedKey: Swift.String?
  public static func setup(with enviroment: MAFPay.Enviroment, apiKey: Swift.String = "", merchantId: Swift.String? = nil, partnerId: Swift.String? = nil, isLoggerActive: Swift.Bool = false)
  public static func tokenize(with verify: Swift.Bool = false, card: MAFPay.Card, accountHolderId: Swift.String? = nil, completion: @escaping MAFPay.MAFPayResponse<MAFPay.Token>)
  public static func getCardList(completion: @escaping MAFPay.MAFPayResponse<[MAFPay.Token]>)
  public static func deleteCard(by cardToken: Swift.String, completion: @escaping MAFPay.MAFPayResponse<Swift.Void>)
  public static func confirmVerification(by amount: Swift.String, cardToken: Swift.String, completion: @escaping MAFPay.MAFPayResponse<Swift.Void>)
  @objc override dynamic public init()
  @objc deinit
}
public enum CardBrand : Swift.String, Swift.CaseIterable {
  case visa
  case mastercard
  case none
  public typealias AllCases = [MAFPay.CardBrand]
  public static var allCases: [MAFPay.CardBrand] {
    get
  }
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol ScanCardViewControllerDelegate : AnyObject {
  func scanCardDidFailed(_ scanner: MAFPay.ScanCardViewController, didScanResult error: MAFPay.MAFPayError)
  func scanCardDidCancel(_ scanner: MAFPay.ScanCardViewController)
}
@objc final public class ScanCardViewController : UIKit.UIViewController {
  weak final public var delegate: MAFPay.ScanCardViewControllerDelegate?
  final public var guideColor: UIKit.UIColor
  final public var scanInstructions: Swift.String?
  @objc dynamic public init()
  @objc override final public func viewDidLoad()
  @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension ScanCardViewController : MAFPay.CardIOPaymentViewControllerDelegate {
  @objc final public func userDidCancel(_ paymentViewController: MAFPay.CardIOPaymentViewController!)
  @objc final public func userDidProvide(_ cardInfo: MAFPay.CardIOCreditCardInfo!, in paymentViewController: MAFPay.CardIOPaymentViewController!)
}
extension MAFPay.Enviroment : Swift.Equatable {}
extension MAFPay.Enviroment : Swift.Hashable {}
extension MAFPay.Enviroment : Swift.RawRepresentable {}
extension MAFPay.CardError : Swift.Hashable {}
extension MAFPay.ItemType : Swift.Equatable {}
extension MAFPay.ItemType : Swift.Hashable {}
extension MAFPay.ItemType : Swift.RawRepresentable {}
extension MAFPay.IconTextFieldPosition : Swift.Hashable {}
extension MAFPay.IconTextFieldPosition : Swift.RawRepresentable {}
extension MAFPay.ShowErrorMessage : Swift.Hashable {}
extension MAFPay.CardBrand : Swift.Hashable {}
extension MAFPay.CardBrand : Swift.RawRepresentable {}
